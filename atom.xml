<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[听风忆雪]]></title>
  <subtitle><![CDATA[一个永远不会停下脚步的追梦者]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2014-09-07T15:00:12.360Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Jackson]]></name>
    <email><![CDATA[luckjackson2@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[java多线程设计模式-----Future模式]]></title>
    <link href="http://yoursite.com/2014/09/07/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-----Future%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2014/09/07/java多线程设计模式-----Future模式/</id>
    <published>2014-09-07T10:25:32.000Z</published>
    <updated>2014-09-07T11:52:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="生活中的Future模式">生活中的Future模式</h2>
<p>Future模式有点类似商品订单,比如在网上提交订单时,当看到某一件商品时,就可以提交订单.当订单处理完毕后,便可在家里等待商品送货上门.<br>大部分情况下，商家对订单的处理并不那么快,在这段时间里,客户完全没必要在家里等候,可以出门处理其他的事情.<br><a id="more"></a></p>
<h2 id="程序中的Future模式">程序中的Future模式</h2>
<p>将此例类推到程序设计中,当一段程序提交了某个请求,期望得到一个答复.但非常不幸的是,服务程序对这个请求的处理可能会很慢.<br>比如,这个请求可能是通过互联网,HTTP或者Web Service等并不太高效的方式调用.在传统的单线程环境下,调用函数是同步的,也就是说它必须等到服务程序返回结果后,才能进行其他处理.<br>而在Future模式下,调用方式改为异步,而原先等待返回的时间段,在主调用函数中,则可用于处理其他事物.</p>
<h2 id="下面贴一下自己的代码">下面贴一下自己的代码</h2>
<p><strong>Data接口</strong></p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> Data {</div><div class="line">    String getResult()</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>FutureData类</strong></p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureData</span> <span class="keyword">implements</span> <span class="title">Data</span></span>{</div><div class="line">  <span class="comment">//FutureData是RealData的包装</span></div><div class="line">    <span class="keyword">private</span> RealData realData = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isReady = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setRealData</span>(RealData realData) {</div><div class="line">    <span class="keyword">if</span>(isReady) {</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">this</span>.realData = realData;</div><div class="line">    isReady = <span class="keyword">true</span>;</div><div class="line">    notifyAll();        <span class="comment">//RealData已经被注入，通知getResult()</span></div><div class="line">}</div><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getResult</span>() {</div><div class="line">    <span class="keyword">while</span>(!isReady) {</div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            wait();        <span class="comment">//一直等待，直到RealData被注入</span></div><div class="line">        } <span class="keyword">catch</span> (Exception e) {</div><div class="line">            <span class="comment">// TODO: handle exception</span></div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> realData.getResult();</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>RealData类</strong></p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class <span class="type">RealData</span> implements <span class="type">Data</span>{</div><div class="line">    private <span class="type">String</span> <span class="literal">result</span> = null;</div><div class="line">    public <span class="type">RealData</span>(<span class="type">String</span> para) {</div><div class="line">    <span class="type">StringBuilder</span> builder = new <span class="type">StringBuilder</span>();</div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++) {</div><div class="line">        builder.append(para);</div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            //模拟耗时的操作</div><div class="line">            <span class="type">Thread</span>.sleep(<span class="number">2000</span>);</div><div class="line">        } catch (<span class="type">Exception</span> e) {</div><div class="line">            e.printStackTrace();</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="literal">result</span> = builder.toString();</div><div class="line">}</div><div class="line">public <span class="type">String</span> getResult() {</div><div class="line">    <span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>Client类</strong></p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</div><div class="line">    <span class="keyword">public</span> Data <span class="title">request</span>(<span class="keyword">final</span> String queryStr) {</div><div class="line">    <span class="keyword">final</span> FutureData futureData = <span class="keyword">new</span> FutureData();</div><div class="line">    <span class="keyword">new</span> Thread() {</div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {  </div><div class="line">            <span class="comment">//RealData的构建很慢，所以在单独的线程中跑</span></div><div class="line">            RealData realData = <span class="keyword">new</span> RealData(queryStr);</div><div class="line">            futureData.setRealData(realData);</div><div class="line">        }</div><div class="line">    }.start();</div><div class="line">    <span class="keyword">return</span> futureData; <span class="comment">//FutureData会被立即返回</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>Main类</strong></p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Main {</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">    Client client = <span class="keyword">new</span> Client();</div><div class="line">    Data data = client.request(<span class="string">"name"</span>);</div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"请求完毕"</span>);</div><div class="line">    <span class="keyword">try</span> {</div><div class="line">        <span class="comment">//这里用一个sleep代理对其他业务逻辑的处理</span></div><div class="line">        <span class="comment">//处理这些业务逻辑的时候，RealData被建立，从而充分利用了等待时间</span></div><div class="line">        Thread.sleep(<span class="number">2000</span>);</div><div class="line">    } <span class="keyword">catch</span> (Exception e) {</div><div class="line">        e.printStackTrace();</div><div class="line">    }</div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"数据 = "</span>+data.getResult());</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<h2 id="生活中的Future模式">生活中的Future模式</h2>
<p>Future模式有点类似商品订单,比如在网上提交订单时,当看到某一件商品时,就可以提交订单.当订单处理完毕后,便可在家里等待商品送货上门.<br>大部分情况下，商家对订单的处理并不那么快,在这段时间里,客户完全没必要在家里等候,可以出门处理其他的事情.<br>]]></summary>
    
      <category term="Design Patterns" scheme="http://yoursite.com/tags/Design-Patterns/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
  </entry>
  
</feed>
