<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[听风忆雪]]></title>
  <subtitle><![CDATA[一个永远不会停下脚步的追梦者]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2014-09-14T08:23:57.824Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Jackson]]></name>
    <email><![CDATA[luckjackson2@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[spring-aop]]></title>
    <link href="http://yoursite.com/2014/09/14/spring-aop/"/>
    <id>http://yoursite.com/2014/09/14/spring-aop/</id>
    <published>2014-09-14T06:38:37.000Z</published>
    <updated>2014-09-14T08:22:34.000Z</updated>
    <content type="html"><![CDATA[<h1 id="面向切面编程">面向切面编程</h1>
<p>在软件系统开发中,分布于应用中多处的功能被称为<strong>横切关注点</strong>(cross-cutting concerns).<br>通常横切关注点从概念上与应用的业务逻辑是相分离的.(但是往往直接嵌入到应用的业务逻辑中)<br>将这些横切关注点与业务逻辑相分离正是面向切面编程(AOP)要解决的</p>
<h2 id="切面编程中的一些术语">切面编程中的一些术语</h2>
<p>切面的常用术语有通知(advice),切点(pointcut)和连接点(jointcut).下面一张吐展示了它们之间<br>的关系<br><img src="http://jackcoder.qiniudn.com/springaop.png" alt="springaop">  </p>
<blockquote>
<ul>
<li>advice   切面的工作被称为通知(advice)<blockquote>
<p>spring中有５种通知</p>
<blockquote>
<ul>
<li>Before —- 在方法调用之前通知</li>
<li>After  —- 在方法完成之后调用通知,无论方法是否调用成功</li>
<li>After-returning —- 在方法成功执行后调用通知</li>
<li>After-throwing  —- 在方法抛出异常后调用通知</li>
<li>通知包裹了被通知的方法,在被通知的方法调用之前和调用之后执行自定义的行为</li>
</ul>
</blockquote>
</blockquote>
</li>
<li>Joinpoint 我们的应用可能对数以千计的时机应用进行通知,这些时机被称为连接点(JoinPoint)</li>
<li>Pointcut 如果通知定义了切面的”什么”和”何时”,那么切点定义了”何处”.切点的定义会匹配<br>所要织入的一个或多个连接点.通常使用明确的类和方法名称来指定这些切点.</li>
<li>Aspect  切面是通知和切点的结合.通知和切点共同定义了切面的全部内容－－它是什么，<br>在何时和何处完成其功能</li>
</ul>
</blockquote>
<h2 id="Spring_Aop示例">Spring Aop示例</h2>
<p>一个Performer(演员)接口</p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> Performer {</div><div class="line">  <span class="keyword">void</span> perform();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Performer接口的实现</p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Juggler</span> <span class="keyword">implements</span> <span class="title">Performer</span></span>{</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> beanBags = <span class="number">3</span>;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="title">Juggler</span>() {};</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="title">Juggler</span>(<span class="keyword">int</span> beanBags) {</div><div class="line">      <span class="keyword">this</span>.beanBags = beanBags;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">perform</span>(){</div><div class="line">       System.out.println(<span class="string">"JUGGLING "</span> + beanBags + <span class="string">"　BEANBAGS"</span>);</div><div class="line">  }</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p>现在假如有个观众(Audience)类,在进场后先选座位(takeSeats),然后关闭手机(turnoffCellPhones)<br>紧接着就是看演员的表演(调用perform方法),如果表演很成功,最后观众会鼓掌(applaud),否则就会要回门票钱<br>(demandRefund).</p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Audience {</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeSeats</span>() {</div><div class="line">      System.<span class="keyword">out</span>.println(<span class="string">"The audience is taking their seats."</span>);</div><div class="line">  }</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnoffCellPhones</span>() {</div><div class="line">      System.<span class="keyword">out</span>.println(<span class="string">"The audience is turning off their phones"</span>);</div><div class="line">  }</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applaud</span>() {</div><div class="line">      System.<span class="keyword">out</span>.println(<span class="string">"CLAP CLAP CLAP......"</span>);</div><div class="line">  }</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demandRefund</span>() {</div><div class="line">      System.<span class="keyword">out</span>.println(<span class="string">"we want our money back!"</span>);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在xml中定义切面</p>
<figure class="highlight [xml]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">  <span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">beans</span></span></div><div class="line"> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></div><div class="line"> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line"> <span class="attribute">xmlns:p</span>=<span class="value">"http://www.springframework.org/schema/p"</span></div><div class="line"> <span class="attribute">xmlns:aop</span>=<span class="value">"http://www.springframework.org/schema/aop"</span></div><div class="line"> <span class="attribute">xmlns:context</span>=<span class="value">"http://www.springframework.org/schema/context"</span></div><div class="line"> <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans</span></div><div class="line">                    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">                    http://www.springframework.org/schema/context</div><div class="line">                    http://www.springframework.org/schema/context/spring-context-3.0.xsd</div><div class="line">                    http://www.springframework.org/schema/aop</div><div class="line">                    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</div><div class="line">                    "&gt;</div><div class="line">		<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"audience"</span> <span class="attribute">class</span>=<span class="value">"com.springinaction.springidol.Audience"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"juggler"</span> <span class="attribute">class</span>=<span class="value">"com.springinaction.springidol.Juggler"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"15"</span>&gt;</span><span class="tag">&lt;/<span class="title">constructor-arg</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="title">bean</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">aop:config</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="title">aop:aspect</span> <span class="attribute">ref</span>=<span class="value">"audience"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="title">aop:pointcut</span> <span class="attribute">expression</span>=<span class="value">"execution(* com.springinaction.interfaces.Performer.perform(..))"</span></span></div><div class="line">												<span class="attribute">id</span>=<span class="value">"performance"</span>/&gt;</div><div class="line">				<span class="tag">&lt;<span class="title">aop:before</span> <span class="attribute">pointcut-ref</span>=<span class="value">"performance"</span> <span class="attribute">method</span>=<span class="value">"takeSeats"</span>/&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="title">aop:before</span> <span class="attribute">pointcut-ref</span>=<span class="value">"performance"</span> <span class="attribute">method</span>=<span class="value">"turnoffCellPhones"</span>/&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="title">aop:after-returning</span> <span class="attribute">pointcut-ref</span>=<span class="value">"performance"</span> <span class="attribute">method</span>=<span class="value">"applaud"</span>/&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="title">aop:after-throwing</span> <span class="attribute">pointcut-ref</span>=<span class="value">"performance"</span> <span class="attribute">method</span>=<span class="value">"demandRefund"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="title">aop:aspect</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="title">aop:config</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Main方法测试得到运行结果</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">The audience <span class="keyword">is</span> taking their seats.</div><div class="line">The audience <span class="keyword">is</span> turning <span class="keyword">off</span> their phones</div><div class="line">JUGGLING <span class="number">15</span>\u3000BEANBAGS</div><div class="line">CLAP CLAP CLAP......</div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="aop" scheme="http://yoursite.com/tags/aop/"/>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java多线程设计模式-----Future模式]]></title>
    <link href="http://yoursite.com/2014/09/07/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-----Future%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2014/09/07/java多线程设计模式-----Future模式/</id>
    <published>2014-09-07T10:25:32.000Z</published>
    <updated>2014-09-07T11:52:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="生活中的Future模式">生活中的Future模式</h2>
<p>Future模式有点类似商品订单,比如在网上提交订单时,当看到某一件商品时,就可以提交订单.当订单处理完毕后,便可在家里等待商品送货上门.<br>大部分情况下，商家对订单的处理并不那么快,在这段时间里,客户完全没必要在家里等候,可以出门处理其他的事情.<br><a id="more"></a></p>
<h2 id="程序中的Future模式">程序中的Future模式</h2>
<p>将此例类推到程序设计中,当一段程序提交了某个请求,期望得到一个答复.但非常不幸的是,服务程序对这个请求的处理可能会很慢.<br>比如,这个请求可能是通过互联网,HTTP或者Web Service等并不太高效的方式调用.在传统的单线程环境下,调用函数是同步的,也就是说它必须等到服务程序返回结果后,才能进行其他处理.<br>而在Future模式下,调用方式改为异步,而原先等待返回的时间段,在主调用函数中,则可用于处理其他事物.</p>
<h2 id="下面贴一下自己的代码">下面贴一下自己的代码</h2>
<p><strong>Data接口</strong></p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> Data {</div><div class="line">    String getResult()</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>FutureData类</strong></p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureData</span> <span class="keyword">implements</span> <span class="title">Data</span></span>{</div><div class="line">  <span class="comment">//FutureData是RealData的包装</span></div><div class="line">    <span class="keyword">private</span> RealData realData = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isReady = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setRealData</span>(RealData realData) {</div><div class="line">    <span class="keyword">if</span>(isReady) {</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">this</span>.realData = realData;</div><div class="line">    isReady = <span class="keyword">true</span>;</div><div class="line">    notifyAll();        <span class="comment">//RealData已经被注入，通知getResult()</span></div><div class="line">}</div><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getResult</span>() {</div><div class="line">    <span class="keyword">while</span>(!isReady) {</div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            wait();        <span class="comment">//一直等待，直到RealData被注入</span></div><div class="line">        } <span class="keyword">catch</span> (Exception e) {</div><div class="line">            <span class="comment">// TODO: handle exception</span></div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> realData.getResult();</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>RealData类</strong></p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class <span class="type">RealData</span> implements <span class="type">Data</span>{</div><div class="line">    private <span class="type">String</span> <span class="literal">result</span> = null;</div><div class="line">    public <span class="type">RealData</span>(<span class="type">String</span> para) {</div><div class="line">    <span class="type">StringBuilder</span> builder = new <span class="type">StringBuilder</span>();</div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++) {</div><div class="line">        builder.append(para);</div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            //模拟耗时的操作</div><div class="line">            <span class="type">Thread</span>.sleep(<span class="number">2000</span>);</div><div class="line">        } catch (<span class="type">Exception</span> e) {</div><div class="line">            e.printStackTrace();</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="literal">result</span> = builder.toString();</div><div class="line">}</div><div class="line">public <span class="type">String</span> getResult() {</div><div class="line">    <span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>Client类</strong></p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</div><div class="line">    <span class="keyword">public</span> Data <span class="title">request</span>(<span class="keyword">final</span> String queryStr) {</div><div class="line">    <span class="keyword">final</span> FutureData futureData = <span class="keyword">new</span> FutureData();</div><div class="line">    <span class="keyword">new</span> Thread() {</div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {  </div><div class="line">            <span class="comment">//RealData的构建很慢，所以在单独的线程中跑</span></div><div class="line">            RealData realData = <span class="keyword">new</span> RealData(queryStr);</div><div class="line">            futureData.setRealData(realData);</div><div class="line">        }</div><div class="line">    }.start();</div><div class="line">    <span class="keyword">return</span> futureData; <span class="comment">//FutureData会被立即返回</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>Main类</strong></p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Main {</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">    Client client = <span class="keyword">new</span> Client();</div><div class="line">    Data data = client.request(<span class="string">"name"</span>);</div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"请求完毕"</span>);</div><div class="line">    <span class="keyword">try</span> {</div><div class="line">        <span class="comment">//这里用一个sleep代理对其他业务逻辑的处理</span></div><div class="line">        <span class="comment">//处理这些业务逻辑的时候，RealData被建立，从而充分利用了等待时间</span></div><div class="line">        Thread.sleep(<span class="number">2000</span>);</div><div class="line">    } <span class="keyword">catch</span> (Exception e) {</div><div class="line">        e.printStackTrace();</div><div class="line">    }</div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"数据 = "</span>+data.getResult());</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<h2 id="生活中的Future模式">生活中的Future模式</h2>
<p>Future模式有点类似商品订单,比如在网上提交订单时,当看到某一件商品时,就可以提交订单.当订单处理完毕后,便可在家里等待商品送货上门.<br>大部分情况下，商家对订单的处理并不那么快,在这段时间里,客户完全没必要在家里等候,可以出门处理其他的事情.<br>]]></summary>
    
      <category term="Design Patterns" scheme="http://yoursite.com/tags/Design-Patterns/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
  </entry>
  
</feed>
